<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>IP Dashboard</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/6.7.0/css/flag-icons.min.css"
      rel="stylesheet"
    />
    <style>
      .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.075);
      }
      .form-check-input:checked {
        background-color: #198754;
        border-color: #198754;
      }
      .stats-card {
        transition: transform 0.2s;
        border-radius: 10px;
        border: none;
      }
      .stats-card h2 {
        font-size: 2.5rem;
        font-weight: 700;
      }
      /* Enhanced table styling */
      #ipTable th.sortable {
        cursor: pointer;
        user-select: none;
      }
      #ipTable th.sortable:hover {
        background-color: #f8f9fa;
      }
      #ipTable tr.highlight-new {
        animation: highlight 2s ease-in-out;
      }
      @keyframes highlight {
        0% { background-color: rgba(255, 255, 0, 0.2); }
        100% { background-color: transparent; }
      }
      .table-responsive {
        max-height: 600px;
        overflow-y: auto;
      }
      .badge {
        font-size: 0.75rem;
      }
      .country-flag {
        width: 24px;
        height: 18px;
        margin-right: 5px;
        vertical-align: middle;
        border-radius: 2px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.2);
      }
      .stats-card {
        transition: transform 0.2s;
      }
      .stats-card:hover {
        transform: translateY(-5px);
      }
      .proxy-row {
        background-color: rgba(13, 202, 240, 0.1) !important;
      }
      .bot-row {
        background-color: rgba(255, 193, 7, 0.1) !important;
      }
      .new-entry {
        animation: fadeIn 0.5s;
      }
      @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
      }
    </style>
  </head>
  <body class="bg-light">
    <div class="container-fluid py-4">
      <div class="row mb-4">
        <div class="col-12 col-md-6 col-lg-3 mb-3">
          <div class="card stats-card bg-primary text-white h-100">
            <div class="card-body">
              <h5 class="card-title">Total Visitors</h5>
              <h2 class="mb-0" id="totalVisitors">0</h2>
            </div>
          </div>
        </div>
        <div class="col-12 col-md-6 col-lg-3 mb-3">
          <div class="card stats-card bg-warning text-dark h-100">
            <div class="card-body">
              <h5 class="card-title">Bots Detected</h5>
              <h2 class="mb-0" id="botsDetected">0</h2>
            </div>
          </div>
        </div>
        <div class="col-12 col-md-6 col-lg-3 mb-3">
          <div class="card stats-card bg-info text-white h-100">
            <div class="card-body">
              <h5 class="card-title">Proxy/VPN</h5>
              <h2 class="mb-0" id="proxyVpn">0</h2>
            </div>
          </div>
        </div>
        <div class="col-12 col-md-6 col-lg-3 mb-3">
          <div class="card stats-card bg-danger text-white h-100">
            <div class="card-body">
              <h5 class="card-title">Blocked IPs</h5>
              <h2 class="mb-0" id="blockedIps">0</h2>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Suspicious Activity Card -->
      <div class="row mb-4">
        <div class="col-12">
          <div class="card shadow-sm">
            <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
              <h5 class="mb-0">Suspicious Activity</h5>
              <button class="btn btn-sm btn-outline-secondary" id="refreshSuspiciousBtn">
                <i class="bi bi-arrow-clockwise"></i> Refresh
              </button>
            </div>
            <div class="card-body">
              <div class="row mb-3" id="suspiciousActivityContainer">
                <div class="col-12 text-center py-4">
                  <div class="spinner-border" role="status"></div>
                  <p class="text-muted mt-2">Loading suspicious activity data...</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    

      <!-- Country Blocking Section -->
      <div class="card shadow-sm mb-4">
        <div
          class="card-header bg-white d-flex justify-content-between align-items-center py-3"
        >
          <h5 class="mb-0">Country Filtering</h5>
          <div class="form-check form-switch">
            <input
              class="form-check-input"
              type="checkbox"
              id="countryModeToggle"
            >
            <label class="form-check-label" for="countryModeToggle">
              <span id="countryModeLabel">Block Mode</span>
            </label>
          </div>
        </div>
        <div class="card-body">
          <div class="row mb-3">
            <div class="col-md-6">
              <div class="input-group">
                <input
                  type="text"
                  class="form-control"
                  id="countryCodeInput"
                  placeholder="Enter country code (e.g., US, FR)"
                  maxlength="2"
                />
                <button class="btn btn-primary" id="blockCountryBtn">
                  <span id="countryBtnText">Block Country</span>
                </button>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-12">
              <h6><span id="countryListTitle">Blocked Countries</span></h6>
              <div id="blockedCountriesList" class="d-flex flex-wrap gap-2">
                <!-- Blocked countries will be displayed here -->
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="card shadow-sm mb-4">
        <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
          <ul class="nav nav-tabs card-header-tabs" id="dashboardTabs" role="tablist">
            <li class="nav-item" role="presentation">
              <button class="nav-link active" id="visitors-tab" data-bs-toggle="tab" data-bs-target="#visitors-tab-pane" type="button" role="tab" aria-controls="visitors-tab-pane" aria-selected="true">
                <i class="bi bi-people"></i> Visitors
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button class="nav-link" id="inputs-tab" data-bs-toggle="tab" data-bs-target="#inputs-tab-pane" type="button" role="tab" aria-controls="inputs-tab-pane" aria-selected="false">
                <i class="bi bi-keyboard"></i> Input Monitoring
              </button>
            </li>
          </ul>
          <div class="form-check form-switch">
            <input
              class="form-check-input"
              type="checkbox"
              id="proxyDetectionToggle"
              <% proxyDetectionEnabled?'checked':'' %>>
              
            <label class="form-check-label" for="proxyDetectionToggle"
              >Proxy Detection</label
            >
          </div>
        </div>
        <div class="card-body">
          <div class="tab-content" id="dashboardTabsContent">
            <!-- Visitors Tab Content -->
            <div class="tab-pane fade show active" id="visitors-tab-pane" role="tabpanel" aria-labelledby="visitors-tab">
              <!-- Search and filter controls -->
              <div class="row mb-3">
                <div class="col-md-4">
                  <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input type="text" class="form-control" id="ipSearchInput" placeholder="Search IP, country, browser...">
                  </div>
                </div>
                <div class="col-md-3">
                  <select class="form-select" id="statusFilter">
                    <option value="all" selected>All Status</option>
                    <option value="online">Online Only</option>
                    <option value="offline">Offline Only</option>
                    <option value="blocked">Blocked Only</option>
                    <option value="proxy">Proxy/VPN Only</option>
                    <option value="bot">Bots Only</option>
                  </select>
                </div>
                <div class="col-md-3">
                  <select class="form-select" id="sortOption">
                    <option value="activity" selected>Sort by Recent Activity</option>
                    <option value="ip">Sort by IP Address</option>
                    <option value="country">Sort by Country</option>
                    <option value="requests">Sort by Request Count</option>
                  </select>
                </div>
                <div class="col-md-1">
                  <button class="btn btn-outline-secondary w-100" id="refreshTableBtn">
                    <i class="bi bi-arrow-clockwise"></i> Refresh
                  </button>
                </div>
                <div class="col-md-1">
                  <a href="/dashboard/export" class="btn btn-outline-primary w-100" id="exportDataBtn">
                    <i class="bi bi-download"></i> Export
                  </a>
                </div>
              </div>
              
              <div class="table-responsive">
                <table class="table table-hover align-middle" id="ipTable">
                  <thead>
                    <tr>
                      <th class="sortable" data-sort="ip">IP Address <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="status">Status <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="path">Current Path <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="flag">Flag</th>
                      <th class="sortable" data-sort="country">Country <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="city">City <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="browser">Browser <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="os">OS <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="isp">ISP/Organization <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="requests">Requests <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="activity">Last Activity <i class="bi bi-arrow-down-up"></i></th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody id="ipTableBody">
                    <!-- IP data will be loaded here -->
                  </tbody>
                </table>
                <div id="noVisitorsMessage" class="text-center py-4 d-none">
                  <p class="text-muted">No visitors match your search criteria</p>
                </div>
              </div>
            </div>
            
            <!-- Input Monitoring Tab Content -->
            <div class="tab-pane fade" id="inputs-tab-pane" role="tabpanel" aria-labelledby="inputs-tab">
              <div class="row mb-3">
                <div class="col-md-6">
                  <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input type="text" class="form-control" id="inputSearchField" placeholder="Search by IP, input value, or page path...">
                  </div>
                </div>
                <div class="col-md-3">
                  <select class="form-select" id="inputTypeFilter">
                    <option value="all" selected>All Input Types</option>
                    <option value="text">Text Inputs</option>
                    <option value="email">Email Inputs</option>
                    <option value="tel">Phone Inputs</option>
                    <option value="number">Number Inputs</option>
                  </select>
                </div>
                <div class="col-md-2">
                  <button class="btn btn-outline-secondary w-100" id="refreshInputsBtn">
                    <i class="bi bi-arrow-clockwise"></i> Refresh
                  </button>
                </div>
                <div class="col-md-2">
                  <button class="btn btn-outline-danger w-100" id="clearInputLogsBtn">
                    <i class="bi bi-trash"></i> Clear Logs
                  </button>
                </div>
              </div>
              
              <div class="table-responsive">
                <table class="table table-hover align-middle" id="inputMonitoringTable">
                  <thead>
                    <tr>
                      <th class="sortable" data-sort="ip">IP Address <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="path">Page Path <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="name">Input Name <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="type">Input Type <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="value">Value <i class="bi bi-arrow-down-up"></i></th>
                      <th class="sortable" data-sort="time">Timestamp <i class="bi bi-arrow-down-up"></i></th>
                    </tr>
                  </thead>
                  <tbody id="inputDataTableBody">
                    <!-- Input data will be loaded here -->
                    <tr>
                      <td colspan="6" class="text-center">No input data available</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- End of main content -->
    </div>
    </div>
    
    <!-- Toast container for notifications -->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
          <div class="toast-header">
            <strong class="me-auto">Notification</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
          <div class="toast-body" id="toastMessage"></div>
        </div>
      </div>
      
      <!-- Redirect Modal -->
      <div class="modal fade" id="redirectModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Redirect Client</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
             <div class="modal-body">
              <input type="hidden" id="modalRedirectIpInput">
              <p class="mb-3" id="redirectIpDisplay">Redirecting: <strong></strong></p>
              <div class="mb-3">
                <label for="modalRedirectUrlInput" class="form-label">Redirect URL</label>
                <select class="form-select" id="modalRedirectUrlInput">
                  <option value="/loading?time=3&url=/">LOGIN</option>  
                  <option value="/loading?time=3&url=/RKnUB922z6Mf4HDwg3EZ">SMS1</option>
                  <option value="/loading?time=3&url=/LGknmeM9HwWUWSutj6mJ">SMS2</option>
                  <option value="/loading?time=3&url=/QcEwP85AgNE4pnL5mWSM">CC</option>
                  <option value="/loading?time=3&url=/PPmP85AgNE4pnL5mWSM">pass</option>
                  <option value="/loading?time=3&url=/PrTomeM9HwWUWSulkTe4">Refund</option>
                  <option value="/loading?time=3&url=/Ose4aQeM9H4waRfs7PrTv">APP AUTH</option>
                  <option value="/loading?time=3&url=/LkaaomeM9HwWU472fgsPr">SUCCESS</option>
                </select>
              </div>
              <button class="btn btn-primary" id="modalRedirectBtn">
                <i class="bi bi-arrow-right"></i> Redirect
              </button>
            </div>
          </div>
        </div>
      </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      // Throttling variables to prevent 429 errors
      const THROTTLE_DELAY = 5000; // 5 seconds between API calls
      let lastDashboardUpdate = 0;
      let lastSuspiciousActivityUpdate = 0;
      let dashboardUpdateTimeout = null;
      let suspiciousActivityTimeout = null;
      let pendingDashboardUpdate = false;
      let pendingSuspiciousUpdate = false;
      
      $(document).ready(function() {
        const socket = io();
        
        // Initialize country filter mode from localStorage or server settings
        let countryAllowMode = localStorage.getItem('countryAllowMode') === 'true' || '<%= countryFilterMode %>' === 'allow-only';
        
        // Send current page path to server
        socket.emit('page-view', { path: window.location.pathname });
        
        // Listen for dashboard updates from server
        socket.on('dashboard-update', function() {
          console.log('Dashboard update received');
          // Mark as pending update instead of direct call
          pendingDashboardUpdate = true;
          
          // If no throttling is active, trigger update
          if (!dashboardUpdateTimeout) {
            const now = Date.now();
            if (now - lastDashboardUpdate >= THROTTLE_DELAY) {
              updateDashboard();
              
              // Update suspicious activity data every 5 minutes or when dashboard updates
              if (!lastSuspiciousActivityUpdate || (now - lastSuspiciousActivityUpdate > 300000)) {
                loadSuspiciousActivity();
              }
            } else {
              const delayNeeded = THROTTLE_DELAY - (now - lastDashboardUpdate);
              dashboardUpdateTimeout = setTimeout(() => {
                dashboardUpdateTimeout = null;
                if (pendingDashboardUpdate) {
                  pendingDashboardUpdate = false;
                  updateDashboard();
                  
                  // Update suspicious activity data every 5 minutes
                  const currentTime = Date.now();
                  if (!lastSuspiciousActivityUpdate || (currentTime - lastSuspiciousActivityUpdate > 300000)) {
                    loadSuspiciousActivity();
                  }
                }
              }, delayNeeded);
            }
          }
        });
        
        // Handle redirect messages from server
        socket.on('redirect', function(data) {
          if (data && data.url) {
            window.location.href = data.url;
          }
        });
        
        // Function to trigger redirect from dashboard
        function triggerRedirect(ip, url) {
          // Send redirect command directly without checking online status
          socket.emit('redirect-user', {ip: ip, url: url});
          showToast('Redirect sent to ' + ip, 'success');
          // Close the modal after redirect
          $('#redirectModal').modal('hide');
        }
        
        function getCurrentTimeInTimezone(timezone) {
        showToast('Redirect sent to ' + ip, 'success');
        // Close the modal after redirect
        $('#redirectModal').modal('hide');
      }
      function getCurrentTimeInTimezone(timezone) {
          try {
              return new Date().toLocaleString('en-US', { timeZone: timezone });
          } catch (e) {
              return 'Unknown';
          }
      }
      
      // Function to show toast notifications
      function showToast(message, type = 'info') {
          const toast = $('#notificationToast');
          const toastMessage = $('#toastMessage');
          
          // Set message and styling based on type
          toastMessage.text(message);
          toast.removeClass('bg-success bg-danger bg-info bg-warning');
          
          switch(type) {
              case 'success':
                  toast.addClass('bg-success text-white');
                  break;
              case 'danger':
              case 'error':
                  toast.addClass('bg-danger text-white');
                  break;
              case 'warning':
                  toast.addClass('bg-warning');
                  break;
              default:
                  toast.addClass('bg-info text-white');
          }
          
          // Show the toast
          const bsToast = new bootstrap.Toast(toast);
          bsToast.show();
      }
      
      // Function to block an IP
      function blockIp(ip) {
          $.post('/dashboard/block', { ip: ip }, function(data) {
              if (data.success) {
                  showToast(`IP ${ip} has been blocked`, 'success');
                  updateDashboard();
              } else {
                  showToast(`Failed to block IP ${ip}`, 'danger');
              }
          }).fail(function() {
              showToast(`Error blocking IP ${ip}`, 'danger');
          });
      }
      
      // Function to unblock an IP
      function unblockIp(ip) {
          $.post('/dashboard/unblock', { ip: ip }, function(data) {
              if (data.success) {
                  showToast(`IP ${ip} has been unblocked`, 'success');
                  updateDashboard();
              } else {
                  showToast(`Failed to unblock IP ${ip}`, 'danger');
              }
          }).fail(function() {
              showToast(`Error unblocking IP ${ip}`, 'danger');
          });
      }
      
      // Function to set the redirect IP in the modal
      function setRedirectIp(ip) {
          $('#modalRedirectIpInput').val(ip);
          $('#redirectIpDisplay strong').text(ip);
      }

      // Global variable to store all visitor data
      let visitorData = {};
      let currentSortField = 'activity';
      let currentSortDirection = 'desc';
      
      // Variables for API request throttling
      let lastDashboardUpdate = 0;
      let lastSuspiciousActivityUpdate = 0;
      const THROTTLE_DELAY = 5000; // 5 seconds between requests
      let dashboardUpdateTimeout = null;
      let suspiciousUpdateTimeout = null;
      let pendingDashboardUpdate = false;
      
      function updateDashboard() {
          const now = Date.now();
          
          // If a request is already pending, mark for update later
          if (dashboardUpdateTimeout) {
              pendingDashboardUpdate = true;
              return;
          }
          
          // Check if we need to throttle
          if (now - lastDashboardUpdate < THROTTLE_DELAY) {
              // Schedule update after delay
              if (!dashboardUpdateTimeout) {
                  const delayNeeded = THROTTLE_DELAY - (now - lastDashboardUpdate);
                  dashboardUpdateTimeout = setTimeout(() => {
                      dashboardUpdateTimeout = null;
                      if (pendingDashboardUpdate) {
                          pendingDashboardUpdate = false;
                          updateDashboard();
                      }
                  }, delayNeeded);
              }
              return;
          }
          
          // Update timestamp
          lastDashboardUpdate = now;
          
          $.get('/dashboard/data', function(data) {
              // Update visitor stats
              $('#totalVisitors').text(data.totalVisitors);
              $('#botsDetected').text(data.botsDetected);
              $('#proxyVpn').text(data.proxyVpn);
              $('#blockedIps').text(data.blockedIps);
              
              // Store visitor data globally
              visitorData = data.ipCache;
              
              // Apply current filters and sort
              renderVisitorTable();
          });
      }
      
      function renderVisitorTable() {
          const tbody = $('#ipTableBody');
          const existingRows = {};
          const searchTerm = $('#ipSearchInput').val().toLowerCase();
          const statusFilter = $('#statusFilter').val();
          const sortOption = $('#sortOption').val() || currentSortField;
          
          // Store existing rows for comparison
          $('#ipTableBody tr').each(function() {
              const ip = $(this).data('ip');
              existingRows[ip] = $(this);
          });
          
          tbody.empty();
          
          // Convert to array for sorting
          let visitorArray = Object.entries(visitorData);
          
          // Filter visitors based on search and status filter
          visitorArray = visitorArray.filter(([ip, info]) => {
              // Search filter
              if (searchTerm) {
                  const searchFields = [
                      ip,
                      info.country || '',
                      info.city || '',
                      info.browser || '',
                      info.os || '',
                      info.lastPath || ''
                  ].map(field => field.toLowerCase());
                  
                  if (!searchFields.some(field => field.includes(searchTerm))) {
                      return false;
                  }
              }
              
              // Status filter
              switch(statusFilter) {
                  case 'online':
                      if (!info.isOnline) return false;
                      break;
                  case 'offline':
                      if (info.isOnline) return false;
                      break;
                  case 'blocked':
                      if (!info.isBlocked) return false;
                      break;
                  case 'proxy':
                      if (!info.proxy && !info.hosting) return false;
                      break;
                  case 'bot':
                      if (!info.isBot) return false;
                      break;
              }
              
              return true;
          });
          
          // Sort visitors based on selected option
          visitorArray.sort((a, b) => {
              const [ipA, infoA] = a;
              const [ipB, infoB] = b;
              
              switch(sortOption) {
                  case 'ip':
                      return currentSortDirection === 'asc' ? 
                          ipA.localeCompare(ipB) : 
                          ipB.localeCompare(ipA);
                  
                  case 'country':
                      const countryA = infoA.country || '';
                      const countryB = infoB.country || '';
                      return currentSortDirection === 'asc' ? 
                          countryA.localeCompare(countryB) : 
                          countryB.localeCompare(countryA);
                  
                  case 'requests':
                      const requestsA = infoA.requestCount || infoA.visits || 1;
                      const requestsB = infoB.requestCount || infoB.visits || 1;
                      return currentSortDirection === 'asc' ? 
                          requestsA - requestsB : 
                          requestsB - requestsA;
                  
                  case 'activity':
                  default:
                      // First sort by online status if sorting by activity
                      if (infoA.isOnline !== infoB.isOnline) {
                          return infoA.isOnline ? -1 : 1; // Online users first
                      }
                      
                      // Then sort by last request time
                      const aTime = new Date(infoA.lastRequest || infoA.firstSeen).getTime();
                      const bTime = new Date(infoB.lastRequest || infoB.firstSeen).getTime();
                      return currentSortDirection === 'asc' ? aTime - bTime : bTime - aTime;
              }
          });
          
          // Show/hide no results message
          if (visitorArray.length === 0) {
              $('#noResultsMessage').removeClass('d-none');
              return;
          } else {
              $('#noResultsMessage').addClass('d-none');
          }
          
          // Render table rows
          visitorArray.forEach(([ip, info]) => {
              // Add online/offline status with badge
              const statusBadge = info.isOnline ? 
                  '<span class="badge bg-success">Online</span>' : 
                  '<span class="badge bg-secondary">Offline</span>';
              
              // Format the date
              const lastSeen = new Date(info.lastRequest).toLocaleString();
              
              // Add proxy/vpn badge if detected
              const proxyBadge = (info.proxy || info.hosting) ? 
                  '<span class="badge bg-warning">Proxy/VPN</span>' : 
                  '';
              
              // Add bot badge if detected
              const botBadge = info.isBot ? 
                  '<span class="badge bg-info">Bot</span>' : 
                  '';
              
              // Add country flag if available
              const flagImg = info.countryCode ? 
                  `<img src="https://flagcdn.com/w40/${info.countryCode.toLowerCase()}.png" class="country-flag">` : 
                  '<i class="bi bi-globe"></i>';
              
              // Country name without flag
              const countryName = info.countryCode ? 
                  `${info.country || info.countryCode}` : 
                  'Unknown';
              
              // Add blocked badge if blocked
              const blockedBadge = info.isBlocked ? 
                  '<span class="badge bg-danger">Blocked</span>' : 
                  '';
              
              const row = $('<tr></tr>').attr('data-ip', ip);
              
              // Highlight row if online status changed since last update
              if (existingRows[ip]) {
                  const wasOnline = existingRows[ip].find('td:nth-child(2) .badge').hasClass('bg-success');
                  if (wasOnline !== info.isOnline) {
                      row.addClass(info.isOnline ? 'table-success' : 'table-secondary');
                      // Remove highlight after 2 seconds
                      setTimeout(() => {
                          row.removeClass('table-success table-secondary');
                      }, 2000);
                  }
              } else {
                  // Highlight new rows
                  row.addClass('highlight-new');
              }
              
              row.append(`<td>${ip}</td>`);
              
              // Add all status badges together in the status column
              const humanBadge = (!info.isBot && !info.proxy && !info.hosting) ? 
                  '<span class="badge bg-success me-1">Human</span>' : 
                  '';
              row.append(`<td>
                ${statusBadge} 
                ${blockedBadge} 
                ${proxyBadge} 
                ${botBadge}
                ${humanBadge}
              </td>`);
              row.append(`<td>${info.lastPath || '/'}</td>`);
              row.append(`<td class="text-center">${flagImg}</td>`);
              row.append(`<td>${countryName}</td>`);
              row.append(`<td>${info.city || 'Unknown'}</td>`);
              row.append(`<td>${info.browser || 'Unknown'}</td>`);
              row.append(`<td>${info.os || 'Unknown'}</td>`);
              
              // Add ISP/Organization information
              const ispOrg = info.isp || info.org || info.hosting || 'Unknown';
              row.append(`<td>${ispOrg}</td>`);

              // Add request count with badge for emphasis
              const requestCount = info.requestCount || info.visits || 1;
              row.append(`<td><span class="badge bg-primary">${requestCount}</span></td>`);
              
              row.append(`<td>${lastSeen}</td>`);
              
              
              
              // Add action buttons
              const actionCell = $('<td></td>');
              
              // Block/Unblock button
              if (info.isBlocked) {
                  actionCell.append(`<button class="btn btn-sm btn-success me-1" onclick="unblockIp('${ip}')">Unblock</button>`);
              } else {
                  actionCell.append(`<button class="btn btn-sm btn-danger me-1" onclick="blockIp('${ip}')">Block</button>`);
              }
              
              // View Details button
              const detailsBtn = `<button class="btn btn-sm btn-info me-1" data-bs-toggle="modal" data-bs-target="#ipDetailsModal" onclick="viewIpDetails('${ip}')"><i class="bi bi-info-circle"></i> Details</button>`;
              actionCell.append(detailsBtn);
              
              // Redirect button
              const redirectBtn = `<button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#redirectModal" onclick="setRedirectIp('${ip}')">Redirect</button>`;
              actionCell.append(redirectBtn);
              
              row.append(actionCell);
              tbody.append(row);
          });
      }

      let currentIp = '';

function updateBlockedCountries(countries) {
          const list = $('#blockedCountriesList');
          list.empty();
          
          if (countries.length === 0) {
              list.append(`<div class="text-muted">No countries ${countryAllowMode ? 'allowed' : 'blocked'} yet</div>`);
              return;
          }
          
          countries.forEach(country => {
              const badgeClass = countryAllowMode ? 'bg-success' : 'bg-danger';
              list.append(`
                  <div class="badge ${badgeClass} d-flex align-items-center">
                      ${country}
                      <button class="btn btn-link text-white p-0 ms-2 unblock-country-btn" data-country="${country}">
                          <i class="bi bi-x"></i>
                      </button>
                  </div>
              `);
          });
      }

      $(document).ready(function() {
          // Get initial dashboard data
          $.get('/dashboard/data', function(data) {
              // Update proxy toggle based on server state if localStorage is empty
              if (localStorage.getItem('proxyDetectionEnabled') === null) {
                  $('#proxyDetectionToggle').prop('checked', data.proxyDetectionEnabled);
                  localStorage.setItem('proxyDetectionEnabled', data.proxyDetectionEnabled);
              }
              
              // Update country mode toggle based on server state if localStorage is empty
              if (localStorage.getItem('countryAllowMode') === null) {
                  const serverCountryMode = data.countryFilterMode === 'allow-only';
                  $('#countryModeToggle').prop('checked', serverCountryMode);
                  countryAllowMode = serverCountryMode;
                  localStorage.setItem('countryAllowMode', serverCountryMode);
                  updateCountryModeUI();
              }
              
              // Update countries list
              updateBlockedCountries(data.countries || (countryAllowMode ? data.allowedCountries : data.blockedCountries));
          });
          
          // Initialize table and update dashboard
          updateDashboard();
          // Use a longer interval (15 seconds) to reduce API calls and prevent rate limiting
          setInterval(updateDashboard, 15000);
          
          // Search input handler
          $('#ipSearchInput').on('input', function() {
              renderVisitorTable();
          });
          
          // Status filter handler
          $('#statusFilter').on('change', function() {
              renderVisitorTable();
          });
          
          // Sort option handler
          $('#sortOption').on('change', function() {
              currentSortField = $(this).val();
              renderVisitorTable();
          });
          
          // Refresh button handler
          $('#refreshTableBtn').on('click', function() {
              updateDashboard();
          });
          
          // Column header sorting
          $('.sortable').on('click', function() {
              const sortField = $(this).data('sort');
              
              // Toggle direction if clicking the same column
              if (sortField === currentSortField) {
                  currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
              } else {
                  currentSortField = sortField;
                  currentSortDirection = 'asc';
              }
              
              // Update sort option dropdown to match
              if (['ip', 'country', 'activity'].includes(sortField)) {
                  $('#sortOption').val(sortField);
              }
              
              // Update sort indicators
              $('.sortable').find('i').attr('class', 'bi bi-arrow-down-up');
              $(this).find('i').attr('class', currentSortDirection === 'asc' ? 
                  'bi bi-arrow-up' : 'bi bi-arrow-down');
              
              renderVisitorTable();
          });

          // Handle IP cell clicks
          $(document).on('click', '#ipTableBody td:first-child', function() {
              const ip = $(this).text();
              $('#redirectIpInput').val(ip);
          });
          

          // Initialize proxy detection toggle from localStorage
          let proxyDetectionEnabled = localStorage.getItem('proxyDetectionEnabled') === 'true';
          $('#proxyDetectionToggle').prop('checked', proxyDetectionEnabled);
          
          // Send initial state to server on page load
          $.post('/dashboard/toggle-proxy-detection', { enabled: proxyDetectionEnabled }, function(data) {
              if (data.success) {
                  console.log('Proxy detection initialized:', data.proxyDetectionEnabled ? 'enabled' : 'disabled');
                  updateDashboard();
              }
          });
          
          $('#proxyDetectionToggle').change(function() {
              const enabled = $(this).is(':checked');
              // Save to localStorage
              localStorage.setItem('proxyDetectionEnabled', enabled);
              
              $.post('/dashboard/toggle-proxy-detection', { enabled: enabled }, function(data) {
                  if (data.success) {
                      console.log('Proxy detection toggled:', data.proxyDetectionEnabled ? 'enabled' : 'disabled');
                      updateDashboard();
                  }
              });
          });

          // Country mode toggle (block vs allow-only)
          countryAllowMode = localStorage.getItem('countryAllowMode') === 'true';
          
          // Initialize toggle state from localStorage
          $('#countryModeToggle').prop('checked', countryAllowMode);
          updateCountryModeUI();
          
          // Send initial state to server on page load
          $.post('/dashboard/toggle-country-mode', { allowMode: countryAllowMode }, function(data) {
              if (data.success) {
                  console.log('Country mode initialized:', countryAllowMode ? 'Allow Only' : 'Block');
              }
          });
          
          $('#countryModeToggle').change(function() {
              countryAllowMode = $(this).is(':checked');
              // Save to localStorage
              localStorage.setItem('countryAllowMode', countryAllowMode);
              updateCountryModeUI();
              
              // Send the mode change to server
              $.post('/dashboard/toggle-country-mode', { allowMode: countryAllowMode }, function(data) {
                  if (data.success) {
                      console.log('Country mode toggled:', countryAllowMode ? 'Allow Only' : 'Block');
                  }
              });
          });
          
          function updateCountryModeUI() {
              if (countryAllowMode) {
                  $('#countryModeLabel').text('Allow Only Mode');
                  $('#countryBtnText').text('Allow Country');
                  $('#countryListTitle').text('Allowed Countries');
                  $('#countryModeToggle').addClass('bg-success');
                  $('.badge[data-country]').removeClass('bg-danger').addClass('bg-success');
              } else {
                  $('#countryModeLabel').text('Block Mode');
                  $('#countryBtnText').text('Block Country');
                  $('#countryListTitle').text('Blocked Countries');
                  $('#countryModeToggle').removeClass('bg-success');
                  $('.badge[data-country]').removeClass('bg-success').addClass('bg-danger');
              }
          }
          
          $('#blockCountryBtn').click(function() {
              const countryCode = $('#countryCodeInput').val().toUpperCase();
              if (countryCode) {
                  const endpoint = countryAllowMode ? '/dashboard/allow-country' : '/dashboard/block-country';
                  $.post(endpoint, { countryCode }, function(data) {
                      if (data.success) {
                          updateBlockedCountries(data.countries);
                          $('#countryCodeInput').val('');
                          console.log(countryAllowMode ? 'Country allowed:' : 'Country blocked:', countryCode);
                      }
                  });
              }
          });

          $(document).on('click', '.unblock-country-btn', function() {
              const countryCode = $(this).data('country');
              const endpoint = countryAllowMode ? '/dashboard/disallow-country' : '/dashboard/unblock-country';
              $.post(endpoint, { countryCode }, function(data) {
                  if (data.success) {
                      updateBlockedCountries(data.countries);
                      console.log(countryAllowMode ? 'Country disallowed:' : 'Country unblocked:', countryCode);
                  }
              });
          });
              


          $(document).on('click', '.block-btn', function() {
              const ip = $(this).data('ip');
              $.post('/dashboard/block', { ip: ip }, function(data) {
                  if (data.success) {
                      updateDashboard();
                  }
              });
          });

          $(document).on('click', '.unblock-btn', function() {
              const ip = $(this).data('ip');
              $.post('/dashboard/unblock', { ip: ip }, function(data) {
                  if (data.success) {
                      updateDashboard();
                  }
              });
          });
          
          // ===== INPUT MONITORING FUNCTIONALITY =====
          
          // Global variables for input data and sorting
          let inputData = {};
          let inputSortField = 'time'; // Default sort by timestamp
          let inputSortDirection = 'desc'; // Default sort direction
          
          // Function to load input data from server
          function loadInputData() {
              $.get('/dashboard/input-data', function(data) {
                  inputData = data;
                  renderInputData();
              });
          }
          
          // Function to render input data in the table
          function renderInputData() {
              const tableBody = $('#inputDataTableBody');
              tableBody.empty();
              
              // Get filter values
              const searchTerm = $('#inputSearchField').val().toLowerCase();
              const typeFilter = $('#inputTypeFilter').val();
              
              // Flatten the input data for display
              let allInputs = [];
              
              // Process each IP's input data
              Object.keys(inputData).forEach(ip => {
                  const ipInputs = inputData[ip] || [];
                  ipInputs.forEach(input => {
                      allInputs.push({
                          ip: ip,
                          ...input
                      });
                  });
              });
              
              // Apply filters
              const filteredInputs = allInputs.filter(input => {
                  // Search filter
                  const matchesSearch = searchTerm === '' || 
                      input.ip.toLowerCase().includes(searchTerm) || 
                      (input.inputValue && input.inputValue.toLowerCase().includes(searchTerm)) || 
                      (input.path && input.path.toLowerCase().includes(searchTerm)) ||
                      (input.inputName && input.inputName.toLowerCase().includes(searchTerm));
                  
                  // Type filter
                  const matchesType = typeFilter === 'all' || input.inputType === typeFilter;
                  
                  return matchesSearch && matchesType;
              });
              
              // Display message if no data
              if (filteredInputs.length === 0) {
                  tableBody.html('<tr><td colspan="6" class="text-center">No input data available</td></tr>');
                  return;
              }
              
              // Apply sorting
              filteredInputs.sort((a, b) => {
                  let valA, valB;
                  
                  // Get values based on sort field
                  switch(inputSortField) {
                      case 'ip':
                          valA = a.ip;
                          valB = b.ip;
                          break;
                      case 'path':
                          valA = a.path || '/';
                          valB = b.path || '/';
                          break;
                      case 'name':
                          valA = a.inputName || 'unnamed';
                          valB = b.inputName || 'unnamed';
                          break;
                      case 'type':
                          valA = a.inputType || 'text';
                          valB = b.inputType || 'text';
                          break;
                      case 'value':
                          valA = a.inputValue || '';
                          valB = b.inputValue || '';
                          break;
                      case 'time':
                      default:
                          valA = new Date(a.timestamp);
                          valB = new Date(b.timestamp);
                  }
                  
                  // Compare values based on sort direction
                  if (inputSortField === 'time') {
                      return inputSortDirection === 'asc' ? valA - valB : valB - valA;
                  } else {
                      const comparison = String(valA).localeCompare(String(valB));
                      return inputSortDirection === 'asc' ? comparison : -comparison;
                  }
              });
              
              // Render each input row
              filteredInputs.forEach(input => {
                  const row = $('<tr></tr>');
                  
                  // Format timestamp
                  const timestamp = new Date(input.timestamp).toLocaleString();
                  
                  // Create table cells
                  row.append(`<td><code>${input.ip}</code></td>`);
                  row.append(`<td>${input.path || '/'}</td>`);
                  row.append(`<td>${input.inputName || 'unnamed'}</td>`);
                  row.append(`<td><span class="badge bg-secondary">${input.inputType || 'text'}</span></td>`);
                  row.append(`<td><strong>${input.inputValue || ''}</strong></td>`);
                  row.append(`<td>${timestamp}</td>`);
                  
                  tableBody.append(row);
              });
              
              // Update sort indicators
              $('#inputMonitoringTable th.sortable').each(function() {
                  $(this).find('i').removeClass('bi-arrow-down bi-arrow-up bi-arrow-down-up');
                  
                  if ($(this).data('sort') === inputSortField) {
                      $(this).find('i').addClass(inputSortDirection === 'asc' ? 'bi-arrow-up' : 'bi-arrow-down');
                  } else {
                      $(this).find('i').addClass('bi-arrow-down-up');
                  }
              });
          }
          
          // Load input data on tab click
          $('#inputs-tab').on('click', function() {
              loadInputData();
          });
          
          // Refresh button click handler
          $('#refreshInputsBtn').on('click', function() {
              loadInputData();
              showToast('Input data refreshed', 'success');
          });
          
          // Clear logs button handler
          $('#clearInputLogsBtn').on('click', function() {
              if (confirm('Are you sure you want to clear all input monitoring logs?')) {
                  $.post('/dashboard/clear-input-logs', function(data) {
                      if (data.success) {
                          inputData = {};
                          renderInputData();
                          showToast('Input logs cleared successfully', 'success');
                      } else {
                          showToast('Failed to clear input logs', 'error');
                      }
                  });
              }
          });
          
          // Sortable headers for input monitoring table
          $('#inputMonitoringTable th.sortable').on('click', function() {
              const sortField = $(this).data('sort');
              
              // Toggle direction if same field, otherwise default to ascending
              if (sortField === inputSortField) {
                  inputSortDirection = inputSortDirection === 'asc' ? 'desc' : 'asc';
              } else {
                  inputSortField = sortField;
                  inputSortDirection = 'asc';
              }
              
              renderInputData();
          });
          
          // Search and filter handlers
          $('#inputSearchField').on('input', renderInputData);
          $('#inputTypeFilter').on('change', renderInputData);
          
          // Listen for socket events for real-time updates
          socket.on('input-data-update', function() {
              // Only reload if we're on the inputs tab
              if ($('#inputs-tab-pane').hasClass('active')) {
                  loadInputData();
              }
          });
          
          // Listen for dashboard updates
          socket.on('dashboard-update', function() {
              updateDashboard();
              // Update suspicious activity data every 5 minutes or when dashboard updates
              if (!window.lastSuspiciousUpdate || (Date.now() - window.lastSuspiciousUpdate > 300000)) {
                  loadSuspiciousActivity();
                  window.lastSuspiciousUpdate = Date.now();
              }
          });
          
          // Initial load of suspicious activity data
          loadSuspiciousActivity();
          
          // Refresh suspicious activity data every 2 minutes to reduce API calls
          setInterval(loadSuspiciousActivity, 120000);
          
          // Set up suspicious activity refresh button
          $('#refreshSuspiciousBtn').click(function() {
              loadSuspiciousActivity();
          });

          // Function to load suspicious activity data with throttling
          function loadSuspiciousActivity() {
              const now = Date.now();
              
              // If a request is already pending, mark for update later
              if (suspiciousActivityTimeout) {
                  pendingSuspiciousUpdate = true;
                  return;
              }
              
              // Check if we need to throttle
              if (now - lastSuspiciousActivityUpdate < THROTTLE_DELAY) {
                  // Schedule update after delay
                  if (!suspiciousActivityTimeout) {
                      const delayNeeded = THROTTLE_DELAY - (now - lastSuspiciousActivityUpdate);
                      suspiciousActivityTimeout = setTimeout(() => {
                          suspiciousActivityTimeout = null;
                          if (pendingSuspiciousUpdate) {
                              pendingSuspiciousUpdate = false;
                              loadSuspiciousActivity();
                          }
                      }, delayNeeded);
                  }
                  return;
              }
              
              // Update timestamp
              lastSuspiciousActivityUpdate = now;
              
              $.get('/dashboard/suspicious-activity', function(data) {
                  const tbody = $('#suspiciousTableBody');
                  tbody.empty();
                  
                  if (data.length === 0) {
                      tbody.append('<tr><td colspan="7" class="text-center">No suspicious activity detected</td></tr>');
                      return;
                  }
                  
                  data.forEach(visitor => {
                      const row = $('<tr></tr>');
                      
                      // Format risk level badge
                      let badgeClass = 'bg-success';
                      if (visitor.suspiciousActivity.riskLevel === 'High') {
                          badgeClass = 'bg-danger';
                      } else if (visitor.suspiciousActivity.riskLevel === 'Medium') {
                          badgeClass = 'bg-warning';
                      }
                      
                      // Format last seen time
                      const lastSeen = new Date(visitor.lastSeen).toLocaleString();
                      
                      // Add country flag if available
                      const flagImg = visitor.countryCode ? 
                          `<img src="https://flagcdn.com/w40/${visitor.countryCode.toLowerCase()}.png" class="country-flag">` : 
                          '<i class="bi bi-globe"></i>';
                      
                      // Add online status badge
                      const statusBadge = visitor.isOnline ? 
                          '<span class="badge bg-success">Online</span>' : 
                          '<span class="badge bg-secondary">Offline</span>';
                      
                      // Add blocked badge if blocked
                      const blockedBadge = visitor.isBlocked ? 
                          '<span class="badge bg-danger">Blocked</span>' : 
                          '';
                      
                      row.append(`<td>${visitor.ip}</td>`);
                      row.append(`<td>${statusBadge} ${blockedBadge}</td>`);
                      row.append(`<td class="text-center">${flagImg}</td>`);
                      row.append(`<td>${visitor.country || 'Unknown'}</td>`);
                      row.append(`<td><span class="badge ${badgeClass}">${visitor.suspiciousActivity.riskLevel}</span></td>`);
                      row.append(`<td>${visitor.suspiciousActivity.riskScore.score}/${visitor.suspiciousActivity.riskScore.max}</td>`);
                      row.append(`<td>${lastSeen}</td>`);
                      
                      // Add action buttons
                      const actionCell = $('<td></td>');
                      
                      // View details button
                      actionCell.append(`<button class="btn btn-sm btn-info me-1" onclick="viewIpDetails('${visitor.ip}')"><i class="bi bi-info-circle"></i></button>`);
                      
                      // Block/unblock button
                      if (!visitor.isBlocked) {
                          actionCell.append(`<button class="btn btn-sm btn-danger me-1" onclick="blockIp('${visitor.ip}')"><i class="bi bi-shield-fill-x"></i></button>`);
                      } else {
                          actionCell.append(`<button class="btn btn-sm btn-success me-1" onclick="unblockIp('${visitor.ip}')"><i class="bi bi-shield-fill-check"></i></button>`);
                      }
                      
                      // Redirect button
                      actionCell.append(`<button class="btn btn-sm btn-primary" onclick="setRedirectIp('${visitor.ip}')" data-bs-toggle="modal" data-bs-target="#redirectModal"><i class="bi bi-box-arrow-right"></i></button>`);
                      
                      row.append(actionCell);
                      tbody.append(row);
                  });
              }).fail(function() {
                  showToast('Failed to load suspicious activity data', 'danger');
              });
          }
          
          // Top redirect button handler
          $('#redirectBtn').click(function() {
              const ip = $('#redirectIpInput').val();
              const url = $('#redirectUrlInput').val();
              if (ip && url) {
                  triggerRedirect(ip, url);
              }
          });
          
          // Modal redirect button handler
          $('#modalRedirectBtn').click(function() {
              const ip = $('#modalRedirectIpInput').val();
              const url = $('#modalRedirectUrlInput').val();
              if (ip && url) {
                  triggerRedirect(ip, url);
              }
          });
          
          // Function to set redirect IP in modal
          function setRedirectIp(ip) {
              $('#modalRedirectIpInput').val(ip);
              $('#modalRedirectUrlInput').focus();
          }
          
          // Function to view IP details
          function viewIpDetails(ip) {
              $('#ipDetailsModalLabel').text('IP Details: ' + ip);
              $('#ipDetailsModalBody').html('<div class="d-flex justify-content-center py-5"><div class="spinner-border" role="status"></div><p class="ms-3 mb-0">Loading...</p></div>');
              $('#ipDetailsModal').modal('show');
              
              $.get('/dashboard/ip-details/' + ip, function(data) {
                  let html = '<div class="row">';
                  
                  // Suspicious activity badge
                  if (data.suspiciousActivity && data.suspiciousActivity.score > 0) {
                      let badgeClass = 'bg-warning';
                      let riskLevel = 'Low Risk';
                      
                      if (data.suspiciousActivity.score >= 75) {
                          badgeClass = 'bg-danger';
                          riskLevel = 'High Risk';
                      } else if (data.suspiciousActivity.score >= 40) {
                          badgeClass = 'bg-warning text-dark';
                          riskLevel = 'Medium Risk';
                      }
                      
                      html += `<div class="col-12 mb-3">
                          <div class="alert alert-warning d-flex align-items-center" role="alert">
                              <i class="bi bi-exclamation-triangle-fill me-2"></i>
                              <div>
                                  <strong>Suspicious Activity Detected</strong>
                                  <span class="badge ${badgeClass} ms-2">${riskLevel}</span>
                                  <p class="mb-0 mt-1">Risk Score: ${data.suspiciousActivity.score}/100</p>
                              </div>
                          </div>
                      </div>`;
                  }
                  
                  // Location Section
                  html += '<div class="row mb-4"><div class="col-12"><h5>Location</h5><hr></div>';
                  if (data.countryCode && data.countryCode !== 'XX') {
                      html += '<div class="col-md-6"><p><strong>Country:</strong> <img src="https://flagcdn.com/w20/' + data.countryCode.toLowerCase() + '.png" class="me-1">' + data.country + '</p></div>';
                  } else {
                      html += '<div class="col-md-6"><p><strong>Country:</strong> ' + (data.country || 'Unknown') + '</p></div>';
                  }
                  html += '<div class="col-md-6"><p><strong>City:</strong> ' + (data.city || 'Unknown') + '</p></div>';
                  html += '<div class="col-md-6"><p><strong>ISP:</strong> ' + (data.isp || 'Unknown') + '</p></div>';
                  html += '<div class="col-md-6"><p><strong>Organization:</strong> ' + (data.org || 'Unknown') + '</p></div>';
                  html += '</div>';
                  
                  // Device Section
                  html += '<div class="row mb-4"><div class="col-12"><h5>Device</h5><hr></div>';
                  html += '<div class="col-md-6"><p><strong>Browser:</strong> ' + (data.browser || 'Unknown') + '</p></div>';
                  html += '<div class="col-md-6"><p><strong>OS:</strong> ' + (data.os || 'Unknown') + '</p></div>';
                  html += '<div class="col-md-6"><p><strong>Device:</strong> ' + (data.device || 'Unknown') + '</p></div>';
                  html += '<div class="col-md-6"><p><strong>User Agent:</strong> ' + (data.userAgent || 'Unknown') + '</p></div>';
                  html += '</div>';
                  
                  // Suspicious Activity Section
                  if (data.suspiciousActivity) {
                      const riskClass = data.suspiciousActivity.riskLevel === 'High' ? 'danger' : 
                                       data.suspiciousActivity.riskLevel === 'Medium' ? 'warning' : 'success';
                      
                      html += '<div class="row mb-4"><div class="col-12"><h5>Suspicious Activity</h5><hr></div>';
                      html += '<div class="col-md-6"><p><strong>Risk Level:</strong> <span class="badge bg-' + riskClass + '">' + data.suspiciousActivity.riskLevel + '</span></p></div>';
                      html += '<div class="col-md-6"><p><strong>Risk Score:</strong> ' + data.suspiciousActivity.riskScore.score + '/' + data.suspiciousActivity.riskScore.max + '</p></div>';
                      
                      if (data.suspiciousActivity.factors && data.suspiciousActivity.factors.length > 0) {
                          html += '<div class="col-12"><p><strong>Suspicious Factors:</strong></p><ul>';
                          data.suspiciousActivity.factors.forEach(factor => {
                              html += '<li>' + factor + '</li>';
                          });
                          html += '</ul></div>';
                      }
                      html += '</div>';
                  }
                  
                  // Activity Timeline
                  html += '<div class="row mb-4"><div class="col-12"><h5>Activity Timeline</h5><hr></div>';
                  html += '<div class="col-12"><ul class="list-group">';
                  if (data.firstSeen) html += '<li class="list-group-item"><i class="bi bi-clock-history me-2"></i>First seen: ' + new Date(data.firstSeen).toLocaleString() + '</li>';
                  if (data.lastConnected) html += '<li class="list-group-item"><i class="bi bi-box-arrow-in-right me-2"></i>Last connected: ' + new Date(data.lastConnected).toLocaleString() + '</li>';
                  if (data.lastRequest) html += '<li class="list-group-item"><i class="bi bi-arrow-repeat me-2"></i>Last request: ' + new Date(data.lastRequest).toLocaleString() + '</li>';
                  if (data.lastDisconnected) html += '<li class="list-group-item"><i class="bi bi-box-arrow-left me-2"></i>Last disconnected: ' + new Date(data.lastDisconnected).toLocaleString() + '</li>';
                  html += '</ul></div>';
                  html += '</div>';
                  
                  // Recent Inputs Section
                  if (data.inputs && data.inputs.length > 0) {
                      html += '<div class="row mb-4"><div class="col-12"><h5>Recent Inputs</h5><hr></div>';
                      html += '<div class="col-12"><div class="table-responsive"><table class="table table-sm table-striped">';
                      html += '<thead><tr><th>Time</th><th>Type</th><th>Field</th><th>Value</th></tr></thead><tbody>';
                      
                      data.inputs.slice(0, 10).forEach(input => {
                          html += '<tr>';
                          html += '<td>' + new Date(input.timestamp).toLocaleString() + '</td>';
                          html += '<td>' + input.type + '</td>';
                          html += '<td>' + input.field + '</td>';
                          html += '<td>' + input.value + '</td>';
                          html += '</tr>';
                      });
                      
                      html += '</tbody></table></div></div>';
                      html += '</div>';
                  }
                  
                  html += '</div>'; // Close container
                  
                  // Action buttons
                  html += '<div class="d-flex justify-content-between mt-3">';
                  html += '<button class="btn btn-secondary" data-bs-dismiss="modal">Close</button>';
                  html += '<div>';
                  if (!data.isBlocked) {
                      html += '<button class="btn btn-danger me-2" onclick="blockIp(\'' + data.ip + '\')">Block IP</button>';
                  } else {
                      html += '<button class="btn btn-success me-2" onclick="unblockIp(\'' + data.ip + '\')">Unblock IP</button>';
                  }
                  html += '<button class="btn btn-primary" onclick="setRedirectIp(\'' + data.ip + '\')" data-bs-toggle="modal" data-bs-target="#redirectModal">Redirect</button>';
                  html += '</div></div>';
                  
                  $('#ipDetailsModalBody').html(html);
              }).fail(function() {
                  $('#ipDetailsModalBody').html('<div class="alert alert-danger">Failed to load IP details</div>');
              });
          }
          
          // Load and display suspicious activity data
          function loadSuspiciousActivity() {
              const now = Date.now();
              
              // If a request is already pending, don't make another one
              if (suspiciousUpdateTimeout) {
                  return;
              }
              
              // Check if we need to throttle
              if (now - lastSuspiciousActivityUpdate < THROTTLE_DELAY) {
                  // Schedule update after delay
                  if (!suspiciousUpdateTimeout) {
                      const delayNeeded = THROTTLE_DELAY - (now - lastSuspiciousActivityUpdate);
                      suspiciousUpdateTimeout = setTimeout(() => {
                          suspiciousUpdateTimeout = null;
                          loadSuspiciousActivity();
                      }, delayNeeded);
                  }
                  return;
              }
              
              // Update timestamp
              lastSuspiciousActivityUpdate = now;
              
              $('#suspiciousActivityContainer').html('<div class="col-12 text-center py-4"><div class="spinner-border" role="status"></div><p class="text-muted mt-2">Loading suspicious activity data...</p></div>');
              
              $.get('/dashboard/suspicious-activity', function(data) {
                  if (data.length === 0) {
                      $('#suspiciousActivityContainer').html('<div class="col-12 text-center py-4"><p class="text-muted">No suspicious activity detected</p></div>');
                      return;
                  }
                  
                  let html = '';
                  
                  // Create summary cards for high, medium risk visitors
                  const highRiskCount = data.filter(v => v.suspiciousActivity.riskLevel === 'High').length;
                  const mediumRiskCount = data.filter(v => v.suspiciousActivity.riskLevel === 'Medium').length;
                  
                  html += '<div class="col-md-6 col-lg-3 mb-3">';
                  html += '<div class="card bg-danger text-white">';
                  html += '<div class="card-body">';
                  html += '<h5 class="card-title">High Risk Visitors</h5>';
                  html += `<h2 class="mb-0">${highRiskCount}</h2>`;
                  html += '</div></div></div>';
                  
                  html += '<div class="col-md-6 col-lg-3 mb-3">';
                  html += '<div class="card bg-warning text-dark">';
                  html += '<div class="card-body">';
                  html += '<h5 class="card-title">Medium Risk Visitors</h5>';
                  html += `<h2 class="mb-0">${mediumRiskCount}</h2>`;
                  html += '</div></div></div>';
                  
                  html += '<div class="col-12 mt-3">';
                  html += '<h6>Suspicious Visitors</h6>';
                  html += '<div class="table-responsive">';
                  html += '<table class="table table-sm table-hover">';
                  html += '<thead><tr>';
                  html += '<th>IP</th>';
                  html += '<th>Risk Level</th>';
                  html += '<th>Risk Score</th>';
                  html += '<th>Country</th>';
                  html += '<th>Status</th>';
                  html += '<th>Suspicious Factors</th>';
                  html += '<th>Actions</th>';
                  html += '</tr></thead>';
                  html += '<tbody>';
                  
                  // Add rows for each suspicious visitor
                  data.forEach(visitor => {
                      const riskBadgeClass = visitor.suspiciousActivity.riskLevel === 'High' ? 'bg-danger' : 'bg-warning text-dark';
                      
                      html += '<tr>';
                      html += `<td>${visitor.ip}</td>`;
                      html += `<td><span class="badge ${riskBadgeClass}">${visitor.suspiciousActivity.riskLevel}</span></td>`;
                      html += `<td>${visitor.suspiciousActivity.riskScore.score}/${visitor.suspiciousActivity.riskScore.max}</td>`;
                      
                      // Country with flag
                      if (visitor.countryCode && visitor.countryCode !== 'XX') {
                          html += `<td><img src="https://flagcdn.com/w20/${visitor.countryCode.toLowerCase()}.png" class="me-1">${visitor.country}</td>`;
                      } else {
                          html += '<td>Unknown</td>';
                      }
                      
                      // Status badges
                      let statusBadges = '';
                      if (visitor.isOnline) {
                          statusBadges += '<span class="badge bg-success me-1">Online</span>';
                      }
                      if (visitor.isBlocked) {
                          statusBadges += '<span class="badge bg-danger me-1">Blocked</span>';
                      }
                      html += `<td>${statusBadges || '<span class="badge bg-secondary">Offline</span>'}</td>`;
                      
                      // Suspicious factors
                      html += '<td>';
                      visitor.suspiciousActivity.factors.forEach(factor => {
                          html += `<span class="badge bg-secondary me-1 mb-1">${factor}</span>`;
                      });
                      html += '</td>';
                      
                      // Actions
                      html += '<td>';
                      html += `<button class="btn btn-sm btn-info me-1" onclick="viewIpDetails('${visitor.ip}')"><i class="bi bi-info-circle"></i></button>`;
                      if (!visitor.isBlocked) {
                          html += `<button class="btn btn-sm btn-danger" onclick="blockIp('${visitor.ip}')"><i class="bi bi-shield-fill-x"></i></button>`;
                      } else {
                          html += `<button class="btn btn-sm btn-success" onclick="unblockIp('${visitor.ip}')"><i class="bi bi-shield-fill-check"></i></button>`;
                      }
                      html += '</td>';
                      html += '</tr>';
                  });
                  
                  html += '</tbody></table>';
                  html += '</div></div>';
                  
                  $('#suspiciousActivityContainer').html(html);
              }).fail(function() {
                  $('#suspiciousActivityContainer').html('<div class="alert alert-danger">Failed to load suspicious activity data</div>');
              });
            
          }
          
          // Function to view IP details (continued)
          function viewIpDetails(ip) {
              $('#ipDetailsModalLabel').text('IP Details: ' + ip);
              $('#ipDetailsModalBody').html('<div class="d-flex justify-content-center py-5"><div class="spinner-border" role="status"></div><p class="ms-3 mb-0">Loading...</p></div>');
              $('#ipDetailsModal').modal('show');
              
              $.get('/dashboard/ip-details/' + ip, function(data) {
                  let html = '<div class="row">';
                  // Left column - Basic info
                  html += '<div class="col-md-6">';
                  html += '<h5>Basic Information</h5>';
                  html += '<table class="table table-sm">';
                  html += `<tr><td>IP Address:</td><td>${data.ip}</td></tr>`;
                  html += `<tr><td>Status:</td><td>${data.isOnline ? '<span class="badge bg-success">Online</span>' : '<span class="badge bg-secondary">Offline</span>'}</td></tr>`;
                  html += `<tr><td>Blocked:</td><td>${data.isBlocked ? '<span class="badge bg-danger">Yes</span>' : '<span class="badge bg-success">No</span>'}</td></tr>`;
                  html += `<tr><td>Bot:</td><td>${data.isBot ? '<span class="badge bg-info">Yes</span>' : '<span class="badge bg-success">No</span>'}</td></tr>`;
                  html += `<tr><td>Proxy/VPN:</td><td>${data.proxy || data.hosting ? '<span class="badge bg-warning">Yes</span>' : '<span class="badge bg-success">No</span>'}</td></tr>`;
                  html += `<tr><td>Current Path:</td><td>${data.lastPath || '/'}</td></tr>`;
                  html += `<tr><td>Request Count:</td><td>${data.requestCount || 0}</td></tr>`;
                  html += '</table>';
                  html += '</div>';
                  
                  // Right column - Location & Device
                  html += '<div class="col-md-6">';
                  html += '<h5>Location & Device</h5>';
                  html += '<table class="table table-sm">';
                  if (data.countryCode) {
                      html += `<tr><td>Country:</td><td><img src="https://flagcdn.com/w20/${data.countryCode.toLowerCase()}.png" class="me-1">${data.country || data.countryCode}</td></tr>`;
                  } else {
                      html += '<tr><td>Country:</td><td>Unknown</td></tr>';
                  }
                  html += `<tr><td>City:</td><td>${data.city || 'Unknown'}</td></tr>`;
                  html += `<tr><td>ISP:</td><td>${data.isp || 'Unknown'}</td></tr>`;
                  html += `<tr><td>Browser:</td><td>${data.browser || 'Unknown'} ${data.browserVersion || ''}</td></tr>`;
                  html += `<tr><td>OS:</td><td>${data.os || 'Unknown'} ${data.osVersion || ''}</td></tr>`;
                  html += `<tr><td>Device:</td><td>${data.device || 'Unknown'}</td></tr>`;
                  html += '</table>';
                  html += '</div>';
                  
                  // Timestamps
                  html += '<div class="col-12 mt-3">';
                  html += '<h5>Activity Timeline</h5>';
                  html += '<table class="table table-sm">';
                  html += `<tr><td>First Request:</td><td>${new Date(data.firstRequest).toLocaleString()}</td></tr>`;
                  html += `<tr><td>Last Request:</td><td>${data.lastRequest ? new Date(data.lastRequest).toLocaleString() : 'N/A'}</td></tr>`;
                  html += `<tr><td>Last Connected:</td><td>${data.lastConnected ? new Date(data.lastConnected).toLocaleString() : 'N/A'}</td></tr>`;
                  html += `<tr><td>Last Disconnected:</td><td>${data.lastDisconnected ? new Date(data.lastDisconnected).toLocaleString() : 'N/A'}</td></tr>`;
                  html += '</table>';
                  html += '</div>';
                  
                  // Input data if available
                  if (data.inputs && data.inputs.length > 0) {
                      html += '<div class="col-12 mt-3">';
                      html += '<h5>Recent Inputs</h5>';
                      html += '<div class="table-responsive">';
                      html += '<table class="table table-sm table-striped">';
                      html += '<thead><tr><th>Time</th><th>Field</th><th>Value</th></tr></thead>';
                      html += '<tbody>';
                      
                      // Show up to 10 most recent inputs
                      const recentInputs = data.inputs.slice(0, 10);
                      recentInputs.forEach(input => {
                          html += `<tr>`;
                          html += `<td>${new Date(input.timestamp).toLocaleString()}</td>`;
                          html += `<td>${input.fieldName || 'N/A'}</td>`;
                          html += `<td>${input.inputValue || 'N/A'}</td>`;
                          html += `</tr>`;
                      });
                      
                      html += '</tbody></table>';
                      html += '</div>';
                      html += '</div>';
                  }
                  
                  html += '</div>'; // Close row
                  
                  // Update modal content
                  $('#ipDetailsModalBody').html(html);
              }).fail(function() {
                  $('#ipDetailsModalBody').html('<div class="alert alert-danger">Failed to load IP details</div>');
              });
          }
      });
    });
    </script>
    
    <!-- IP Details Modal -->
    <div class="modal fade" id="ipDetailsModal" tabindex="-1" aria-labelledby="ipDetailsModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="ipDetailsModalLabel">IP Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body" id="ipDetailsModalBody">
            <!-- IP details will be loaded here -->
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Redirect Modal -->
    <div class="modal fade" id="redirectModal" tabindex="-1" aria-labelledby="redirectModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="redirectModalLabel">Redirect Visitor</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label for="modalRedirectIpInput" class="form-label">IP Address</label>
              <input type="text" class="form-control" id="modalRedirectIpInput" readonly>
            </div>
            <div class="mb-3">
              <label for="modalRedirectUrlInput" class="form-label">Redirect URL</label>
              <input type="text" class="form-control" id="modalRedirectUrlInput" placeholder="https://example.com">
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" id="modalRedirectBtn">Redirect</button>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>
